// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using reimbursement_server_side.Models;

namespace reimbursement_server_side.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079");

            modelBuilder.Entity("reimbursement_server_side.Models.Reimbursement", b =>
                {
                    b.Property<int>("rId")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("rAmount");

                    b.Property<int>("rAuthoruserId");

                    b.Property<string>("rDescription");

                    b.Property<byte[]>("rResolved")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int?>("rResolveruserId");

                    b.Property<int>("rStatusId");

                    b.Property<byte[]>("rSubmitted")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("rTypeId");

                    b.HasKey("rId");

                    b.HasIndex("rAuthoruserId");

                    b.HasIndex("rResolveruserId");

                    b.HasIndex("rStatusId");

                    b.HasIndex("rTypeId");

                    b.ToTable("Reimbursements");
                });

            modelBuilder.Entity("reimbursement_server_side.Models.ReimbursementStatus", b =>
                {
                    b.Property<int>("rStatusId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("rStatus")
                        .IsRequired();

                    b.HasKey("rStatusId");

                    b.ToTable("ReimbursementStatuses");
                });

            modelBuilder.Entity("reimbursement_server_side.Models.ReimbursementType", b =>
                {
                    b.Property<int>("rTypeId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("rType")
                        .IsRequired();

                    b.HasKey("rTypeId");

                    b.ToTable("ReimbursementTypes");
                });

            modelBuilder.Entity("reimbursement_server_side.Models.User", b =>
                {
                    b.Property<int>("userId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("password")
                        .IsRequired();

                    b.Property<string>("userEmail")
                        .IsRequired();

                    b.Property<string>("userFName")
                        .IsRequired();

                    b.Property<string>("userLName")
                        .IsRequired();

                    b.Property<int>("userRoleId");

                    b.Property<string>("username")
                        .IsRequired();

                    b.HasKey("userId");

                    b.HasIndex("userRoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("reimbursement_server_side.Models.UserRole", b =>
                {
                    b.Property<int>("userRoleId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("userRole")
                        .IsRequired();

                    b.HasKey("userRoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("reimbursement_server_side.Models.Reimbursement", b =>
                {
                    b.HasOne("reimbursement_server_side.Models.User", "rAuthor")
                        .WithMany()
                        .HasForeignKey("rAuthoruserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("reimbursement_server_side.Models.User", "rResolver")
                        .WithMany()
                        .HasForeignKey("rResolveruserId");

                    b.HasOne("reimbursement_server_side.Models.ReimbursementStatus", "rStatus")
                        .WithMany()
                        .HasForeignKey("rStatusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("reimbursement_server_side.Models.ReimbursementType", "rType")
                        .WithMany()
                        .HasForeignKey("rTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("reimbursement_server_side.Models.User", b =>
                {
                    b.HasOne("reimbursement_server_side.Models.UserRole", "userRole")
                        .WithMany()
                        .HasForeignKey("userRoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
